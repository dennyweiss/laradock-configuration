stages:
  - stage: 'Build'
    displayName: Build
    condition: eq(variables['stages_enabled__stage_build'], true)
    jobs:
    - job: 'from_source_to_artifact'
      timeoutInMinutes: 15
      cancelTimeoutInMinutes: 5
      pool:
        vmImage: 'ubuntu-18.04'
      steps:

        - bash: |
            NEW_ARTIFACT_TIMESTAMP="$(date "+%Y%m%d%H%M%S")"
            echo "##vso[task.setvariable variable=ARTIFACT_TIMESTAMP]${NEW_ARTIFACT_TIMESTAMP}"
          displayName: 'Preparation: evaluate ARTIFACT_TIMESTAMP'

        - bash: |
            echo "##vso[task.setvariable variable=ARTIFACT_VERSION_TAG]Commit-${ARTIFACT_VERSION}"
          displayName: 'Preparation: evaluate ARTIFACT_VERSION & ARTIFACT_VERSION_TAG'

        - bash: |
            echo "##vso[task.setvariable variable=ARTIFACT_BUILD_TAG]Build-${ARTIFACT_BUILD_ID}"
          displayName: 'Preparation: evaluate ARTIFACT_BUILD_TAG'

        - bash: |
            git config --global user.name "${ARTIFACT_REPOSITORY_USER}"
            git config --global user.email "${ARTIFACT_REPOSITORY_EMAIL}"
          displayName: "Preparation: define build git identity for artifacts repository"

        # //////////////////////////////////////////////////////////////////////
        # // DEBUG

        - bash: |
            echo "\$COMPOSE_PROJECT_NAME                            = '${COMPOSE_PROJECT_NAME}'"
            echo "\$APP_CODE_PATH_HOST                              = '${APP_CODE_PATH_HOST}'"
            echo "\$APP_CODE_PATH_CONTAINER                         = '${APP_CODE_PATH_CONTAINER}'"
            echo "\$APP_CODE_CONTAINER_FLAG                         = '${APP_CODE_CONTAINER_FLAG}'"
            echo "\$DATA_PATH_HOST                                  = '${DATA_PATH_HOST}'"
            echo "\$COMPOSE_FILE                                    = '${COMPOSE_FILE}'"
            echo "\$COMPOSE_USER                                    = '${COMPOSE_USER}'"
            echo "\$COMPOSE_SERVICE_STACK                           = '${COMPOSE_SERVICE_STACK}'"
            echo "\$COMPOSE_LARADOCK_PACKAGE_PATH                   = '${COMPOSE_LARADOCK_PACKAGE_PATH}'"
            echo "\$COMPOSE_LARADOCK_CONFIGURATION_PACKAGE_PATH     = '${COMPOSE_LARADOCK_CONFIGURATION_PACKAGE_PATH}'"
            echo "\$COMPOSE_DOCKER_CLI_BUILD                        = '${COMPOSE_DOCKER_CLI_BUILD}'"
            echo "\$DOCKER_BUILDKIT                                 = '${DOCKER_BUILDKIT}'"
            echo "\$PHP_VERSION                                     = '${PHP_VERSION}'"
            echo "\$WORKSPACE_BASE_IMAGE_TAG_PREFIX                 = '${WORKSPACE_BASE_IMAGE_TAG_PREFIX}'"
            echo "\$WORKSPACE_PUID                                  = '${WORKSPACE_PUID}'"
            echo "\$WORKSPACE_PGID                                  = '${WORKSPACE_PGID}'"
            echo "\$PHP_FPM_BASE_IMAGE_TAG_PREFIX                   = '${PHP_FPM_BASE_IMAGE_TAG_PREFIX}'"
            echo "\$PHP_FPM_PUID                                    = '${PHP_FPM_PUID}'"
            echo "\$PHP_FPM_PGID                                    = '${PHP_FPM_PGID}'"
            echo "\$PHP_FPM_CONF_PATH                               = '${PHP_FPM_CONF_PATH}'"
            echo "\$PHP_WORKER_PUID                                 = '${PHP_WORKER_PUID}'"
            echo "\$PHP_WORKER_PGID                                 = '${PHP_WORKER_PGID}'"
            echo "\$PHP_WORKER_CONF_PATH_PREFIX                     = '${PHP_WORKER_CONF_PATH_PREFIX}'"
            echo "\$NGINX_HOST_LOG_PATH                             = '${NGINX_HOST_LOG_PATH}'"
            echo "\$NGINX_SSL_PATH                                  = '${NGINX_SSL_PATH}'"
            echo "\$NGINX_SITES_PATH                                = '${NGINX_SITES_PATH}'"
            echo "\$NGINX_CONF_PATH                                 = '${NGINX_CONF_PATH}'"
            echo "\$NGINX_H5PB_PATH                                 = '${NGINX_H5PB_PATH}'"
            echo "\$MYSQL_ENTRYPOINT_INITDB                          = '${MYSQL_ENTRYPOINT_INITDB}'"
            echo ''
            echo "\$SOURCE_REPOSITORY_ID                            = '${SOURCE_REPOSITORY_ID}'"
            echo "\$SOURCE_REPOSITORY_NAME                          = '${SOURCE_REPOSITORY_NAME}'"
            echo "\$SOURCE_REPOSITORY_URI                           = '${SOURCE_REPOSITORY_URI}'"
            echo "\$SOURCE_REPOSITORY_BRANCH_NAME                   = '${SOURCE_REPOSITORY_BRANCH_NAME}'"
            echo ''
            echo "\$ARTIFACT_REPOSITORY                             = '${ARTIFACT_REPOSITORY}'"
            echo "\$ARTIFACT_DIRECTORY                              = '${ARTIFACT_DIRECTORY}'"
            echo "\$ARTIFACT_REPOSITORY_SSH_KEY_FILE                = '${ARTIFACT_REPOSITORY_SSH_KEY_FILE}'"
            echo "\$ARTIFACT_VERSION                                = '${ARTIFACT_VERSION}'"
            echo "\$ARTIFACT_VERSION_TAG                            = '${ARTIFACT_VERSION_TAG}'"
            echo "\$ARTIFACT_BUILD_ID                               = '${ARTIFACT_BUILD_ID}'"
            echo "\$ARTIFACT_BUILD_TAG                              = '${ARTIFACT_BUILD_TAG}'"
            echo "\$ARTIFACT_TIMESTAMP                              = '${ARTIFACT_TIMESTAMP}'"
            echo "\$ARTIFACT_ARTIFACT_EXCLUDES_FILE                 = '${ARTIFACT_EXCLUDES_FILE}'"
            echo ''
            echo "\$STAGING_ENVIRONMENT_HOST                        = '${STAGING_ENVIRONMENT_HOST}'"
            echo "\$STAGING_ENVIRONMENT_URL                         = '${STAGING_ENVIRONMENT_URL}'"
            echo "\$STAGING_ENVIRONMENT_SSH_KEY                     = '${STAGING_ENVIRONMENT_SSH_KEY}'"
            echo "\$STAGING_ENVIRONMENT_APP_PATH                    = '${STAGING_ENVIRONMENT_APP_PATH}'"
            echo "\$WORKSPACE_IMAGE                                 = '${WORKSPACE_IMAGE}'"
            echo "\$WORKSPACE_IMAGE_VERSION                         = '${WORKSPACE_IMAGE_VERSION}'"
            echo "\$PHP_FPM_IMAGE                                   = '${PHP_FPM_IMAGE}'"
            echo "\$PHP_FPM_IMAGE_VERSION                           = '${PHP_FPM_IMAGE_VERSION}'"
            echo "\$PHP_WORKER_IMAGE                                = '${PHP_WORKER_IMAGE}'"
            echo "\$PHP_WORKER_IMAGE_VERSION                        = '${PHP_WORKER_IMAGE_VERSION}'"
            echo "\$NGINX_IMAGE                                     = '${NGINX_IMAGE}'"
            echo "\$NGINX_IMAGE_VERSION                             = '${NGINX_IMAGE_VERSION}'"
            echo ''
            echo "\$DB_HOST                                         = '${DB_HOST}'"
            echo "\$DB_PORT                                         = '${DB_PORT}'"
            echo "\$DB_DATABASE                                     = '${DB_DATABASE}'"
            echo "\$DB_USERNAME                                     = '${DB_USERNAME}'"
            echo "\$DB_PASSWORD                                     = '${DB_PASSWORD}'"
            echo ''
            echo "id >>>"
            id
          displayName: 'DEBUG: print Environment Variables'
          condition: eq(variables['debug_mode__stage_build'], true)

        # //////////////////////////////////////////////////////////////////////
        # // Preparation


        - bash: |
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get -yq install tree || true
          displayName: 'Preparation: install system/agent dependencies'

        - bash: |
            php -v
          displayName: 'Preparation: php version (agent)'

        - bash: |
            composer install --prefer-dist --no-ansi --no-interaction --no-progress
          displayName: 'Preparation: php deps + dev installation'

        - bash: |
            ln -s "${COMPOSE_LARADOCK_CONFIGURATION_PACKAGE_PATH}/docker-compose.ssh.project.yml" docker-compose.ssh.project.yml
          displayName: 'Preparation: ssh key location'

        - bash: |
            git describe --always --tags --dirty >version
          displayName: 'Preparation: write version file for tremby/laravel-git-version'

        # //////////////////////////////////////////////////////////////////////
        # // ACR

        - task: Bash@3
          displayName: 'ACR: login'
          env:
            USER_DR_URL: "$(ACR_URL)"
            USER_DR_SP_APP_ID: "$(ACR_SP_APP_ID)"
            USER_DR_SP_APP_PASSWORD: "$(ACR_SP_APP_PASSWORD)"
          inputs:
            targetType: 'inline'
            workingDirectory: $(Build.Repository.LocalPath)
            noProfile: false
            noRc: false
            script: |
              echo "${USER_DR_SP_APP_PASSWORD}" | docker login "${USER_DR_URL}" \
              --username "${USER_DR_SP_APP_ID}" \
              --password-stdin

        - bash: |
            docker-compose pull --quiet workspace
          displayName: "ACR: pull 'workspace' image"

        - bash: |
            docker-compose pull --quiet mysql
          displayName: "ACR: pull 'mysql' image"

        # //////////////////////////////////////////////////////////////////////
        # // Docker

        - bash: |
            docker --version
            docker-compose --version
          displayName: 'Docker: versions'

        - bash: |
            docker-compose up -d workspace
            docker-compose up -d mysql
          displayName: 'Docker: stackup'

        # //////////////////////////////////////////////////////////////////////
        # // JS

        - bash: |
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace yarn
          displayName: 'JS: dependency installation'

        - bash: |
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace yarn production
          displayName: 'JS: build'

        - bash: |
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace yarn test
          displayName: 'JS: test'

        - bash: |
            tree -La 3 public
          displayName: 'JS: inspect output'

        # //////////////////////////////////////////////////////////////////////
        # // PHP

        - bash: |
            cp .env.prod.build .env
          displayName: 'PHP: setup environment file'

        - bash: |
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace \
            composer install --prefer-dist --no-ansi --no-interaction --no-progress -o
          displayName: 'Preparation: php deps (docker) + dev installation'

        - bash: |
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace php artisan key:generate --force
          displayName: 'PHP: generate app key'

        - bash: |
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace \
            php artisan migrate:fresh --seed --force --no-ansi
          displayName: 'PHP: apply migration'

        - bash: |
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace \
            mysqldump --host="${DB_HOST}" --user="${DB_USERNAME}" --password="${DB_PASSWORD}" "${DB_DATABASE}" > db.sql
          displayName: 'PHP: dump db with migration'

        - bash: |
            echo "PHP: build"
          displayName: 'PHP: build'

        - bash: |
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace \
            mysql --host="${DB_HOST}" --user="${DB_USERNAME}" --password="${DB_PASSWORD}" "${DB_DATABASE}" < db.sql
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace \
            php -d short_open_tag=off ./vendor/phpunit/phpunit/phpunit -v --colors=never --stderr --log-junit $(TESTING_PHPUNIT_RESULTS_SEARCH_FOLDER)/$(TESTING_PHPUNIT_RESULTS_FILE_NAME)
          displayName: 'PHP: run phpunit'

        - task: PublishTestResults@2
          displayName: 'PHP: publish phpunit result'
          inputs:
            testResultsFormat: '$(TESTING_PHPUNIT_RESULTS_FORMAT)'
            testResultsFiles: '$(TESTING_PHPUNIT_RESULTS_FILE_PATTERN)'
            searchFolder: '$(TESTING_PHPUNIT_RESULTS_SEARCH_FOLDER)'
            testRunTitle: 'phpunit'
            publishRunAttachments: true

        - bash: |
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace \
            php ./vendor/friendsofphp/php-cs-fixer/php-cs-fixer fix --diff --dry-run --stop-on-violation
          displayName: 'PHP: run php cs fixer'

        # //////////////////////////////////////////////////////////////////////
        # // Artifact

        - task: InstallSSHKey@0
          displayName: 'Artifact: install ssh key'
          inputs:
            knownHostsEntry: $(ARTIFACT_REPOSITORY_SSH_KNOWN_HOST_ENTRY)
            sshPublicKey: $(ARTIFACT_REPOSITORY_SSH_PUBLIC_KEY)
            sshKeySecureFile: $(ARTIFACT_REPOSITORY_SSH_KEY_SECURE_FILENAME)

        - bash: |
            docker-compose exec -T --user="${COMPOSE_USER:-laradock}" workspace \
            composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-dev -o
          displayName: 'Artifact: remove php dev dependencies'

        - bash: |
            if [[ -d "${ARTIFACT_DIRECTORY}" ]]; then
              rm -rf "${ARTIFACT_DIRECTORY}"
            fi
            git clone "${ARTIFACT_REPOSITORY}" "${ARTIFACT_DIRECTORY}"
            cd "${ARTIFACT_DIRECTORY}"
            git fetch --all --tags
          displayName: 'Artifact: import artifacts repository'

        - bash: |
            find "${ARTIFACT_DIRECTORY}" -mindepth 1 -maxdepth 1 \( -name ".git" -o -name ".gitignore" \) -prune -o -exec rm -rf {} \;
          displayName: 'Artifact: empty repository for new release'

        - bash: |
            rsync -avh --exclude-from="${ARTIFACT_EXCLUDES_FILE}" "${APP_CODE_PATH_HOST}/" "${ARTIFACT_DIRECTORY}"
          displayName: 'Artifact: compose release content'

        - bash: |
            cd "${ARTIFACT_DIRECTORY}"
            git add --all

            git_message="repository"
            git_message="${git_message}\n  id:     '${SOURCE_REPOSITORY_ID}'"
            git_message="${git_message}\n  name:   '${SOURCE_REPOSITORY_NAME}'"
            git_message="${git_message}\n  uri:    '${SOURCE_REPOSITORY_URI}'"
            git_message="${git_message}\n  branch: '${SOURCE_REPOSITORY_BRANCH_NAME}'"

            git commit -m "Artifact created for source '${ARTIFACT_VERSION}' commit hash" \
              -m "repository" \
              -m "$(echo -e "${git_message}")"
            git push
          displayName: 'Artifact: stage and commit release content'

        - bash: |
            cd "${ARTIFACT_DIRECTORY}"

            git_message="repository"
            git_message="${git_message}\n  id:     '${SOURCE_REPOSITORY_ID}'"
            git_message="${git_message}\n  name:   '${SOURCE_REPOSITORY_NAME}'"
            git_message="${git_message}\n  uri:    '${SOURCE_REPOSITORY_URI}'"
            git_message="${git_message}\n  branch: '${SOURCE_REPOSITORY_BRANCH_NAME}'"

            git tag -a "${ARTIFACT_VERSION_TAG}" \
              -m "Artifact created for source '${ARTIFACT_VERSION}' commit hash" \
              -m "$(echo -e "${git_message}")"
            git push --tags
          displayName: 'Artifact: create and push version tag'

        - bash: |
            cd "${ARTIFACT_DIRECTORY}"

            git_message="repository"
            git_message="${git_message}\n  id:     '${SOURCE_REPOSITORY_ID}'"
            git_message="${git_message}\n  name:   '${SOURCE_REPOSITORY_NAME}'"
            git_message="${git_message}\n  uri:    '${SOURCE_REPOSITORY_URI}'"
            git_message="${git_message}\n  branch: '${SOURCE_REPOSITORY_BRANCH_NAME}'"

            git tag -a "${ARTIFACT_BUILD_TAG}" \
              -m "Artifact created for source '${ARTIFACT_VERSION}' commit hash" \
              -m "$(echo -e "${git_message}")"
            git push --tags
          displayName: 'Artifact: create and push build tag'
