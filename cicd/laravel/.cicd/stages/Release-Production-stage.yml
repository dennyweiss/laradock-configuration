stages:
  - stage: 'Release_Production'
    displayName: 'Release to Production'
    dependsOn:
      - 'Release_Staging'
    condition: and(eq(variables['stages_enabled__stage_release_production'], true), succeeded())
    jobs:
    - deployment: 'release_to_production'
      timeoutInMinutes: 15
      cancelTimeoutInMinutes: 5
      pool:
        vmImage: 'ubuntu-18.04'
      environment: '$(PRODUCTION_ENV_NAME)'
      strategy:
        runOnce:
          deploy:
            steps:

              - bash: |
                    echo "##vso[task.setvariable variable=ARTIFACT_BUILD_TAG]Build-${ARTIFACT_BUILD_ID}"
                displayName: 'Preparation: evaluate ARTIFACT_BUILD_TAG'

              # //////////////////////////////////////////////////////////////////////
              # // DEBUG

              - bash: |
                  echo "VERSION                                                      = '${ARTIFACT_BUILD_TAG}'"
                  echo ''
                  echo "PRODUCTION_ENV_SSH_KNOWN_HOST_ENTRY                          = '\$(PRODUCTION_ENV_SSH_KNOWN_HOST_ENTRY)'"
                  echo ''
                  echo "PRODUCTION_ENV_USER                                          = '\$(PRODUCTION_ENV_USER)'"
                  echo "PRODUCTION_ENV_HOST                                          = '\$(PRODUCTION_ENV_HOST)'"
                  echo "PRODUCTION_ENV_SSH_URL                                       = '\$(PRODUCTION_ENV_SSH_URL)'"
                  echo ''
                  echo "PRODUCTION_ENV_APP_PATH                                      = '\$(PRODUCTION_ENV_APP_PATH)'"
                  echo "PRODUCTION_ENV_URL                                           = '\$(PRODUCTION_ENV_URL)'"
                  echo ''
                  echo "db_migration_enabled__stages_release                         = '$(db_migration_enabled__stages_release)'"
                  echo "db_backup_enabled__stage_production                          = '$(db_backup_enabled__stage_production)'"
                  echo "app_maintenance_during_deployment_enabled__stage_production = '$(app_maintenance_during_deployment_enabled__stage_production)'"
                displayName: 'DEBUG'
                condition: eq(variables['debug_mode__stage_production_deployment'], true)
              # //////////////////////////////////////////////////////////////////////
              # // Preparation

              - task: InstallSSHKey@0
                inputs:
                  knownHostsEntry: $(PRODUCTION_ENV_SSH_KNOWN_HOST_ENTRY)
                  sshPublicKey: $(ARTIFACT_REPOSITORY_SSH_PUBLIC_KEY)
                  sshKeySecureFile: $(ARTIFACT_REPOSITORY_SSH_KEY_SECURE_FILENAME)
                displayName: 'Preparation: install ssh key'

              - bash: |
                  ssh $(PRODUCTION_ENV_SSH_URL) << SSH_COMMAND
                    cd $(PRODUCTION_ENV_APP_PATH)
                    pwd
                    git fetch --all --tags
                  SSH_COMMAND
                displayName: 'Preparation: fetch current artifacts repository'

              - bash: |
                  ssh $(PRODUCTION_ENV_SSH_URL) << SSH_COMMAND
                    cd $(PRODUCTION_ENV_APP_PATH)
                    php artisan down --render="errors::503" --retry=60
                  SSH_COMMAND
                displayName: 'Preparation: set application into maintenance'
                condition: and(succeeded(), eq(variables['app_maintenance_during_deployment_enabled__stage_production'], true))

              - bash: |
                  ssh $(PRODUCTION_ENV_SSH_URL) << SSH_COMMAND
                    cd $(PRODUCTION_ENV_APP_PATH)
                    php artisan backup:run --only-db --no-interaction --timeout=120
                  SSH_COMMAND
                displayName: 'Preparation: backup db'
                condition: and(succeeded(), eq(variables['db_backup_enabled__stage_production'], true))

              # //////////////////////////////////////////////////////////////////////
              # // Deployment

              - bash: |
                  current_artifact_version="${ARTIFACT_BUILD_TAG}"
                  ssh $(PRODUCTION_ENV_SSH_URL) << SSH_COMMAND
                    cd $(PRODUCTION_ENV_APP_PATH)
                    echo ''
                    if [[ -z "${current_artifact_version}" ]]; then
                      echo -e "ERROR: '\$current_artifact_version' is not defined"
                      exit 1
                    fi
                    echo ''
                    echo -e "INFO:  Current Artifact Version: '${current_artifact_version}'"
                    echo ''
                    git checkout "${current_artifact_version}"
                    git status
                    git --no-pager log -1
                  SSH_COMMAND
                displayName: 'Deployment: install new version'

              - bash: |
                  ssh $(PRODUCTION_ENV_SSH_URL) << SSH_COMMAND
                    cd $(PRODUCTION_ENV_APP_PATH)
                    php artisan migrate --force
                  SSH_COMMAND
                displayName: 'Deployment: migrate database'
                condition: and(succeeded(), eq(variables['db_migration_enabled__stages_release'], true))

              - bash: |
                  ssh $(PRODUCTION_ENV_SSH_URL) << SSH_COMMAND
                    cd $(PRODUCTION_ENV_APP_PATH)
                    php artisan storage:link --relative
                  SSH_COMMAND
                displayName: 'Deployment: link storage'

              - bash: |
                  ssh $(PRODUCTION_ENV_SSH_URL) << SSH_COMMAND
                    cd $(PRODUCTION_ENV_APP_PATH)
                    php artisan up
                  SSH_COMMAND
                displayName: 'Deployment: bootup application'

              - bash: |
                  ssh $(PRODUCTION_ENV_SSH_URL) << SSH_COMMAND
                  (
                    flock -w 10 9 || exit 1
                    echo 'Restarting FPM...';
                    sudo /usr/sbin/service php7.4-fpm reload
                  ) 9>/tmp/fpmlock
                  SSH_COMMAND
                displayName: 'Deployment: restart php fpm for opcache invalidation'

              # //////////////////////////////////////////////////////////////////////
              # // Test

              - bash: |
                  if [[ -z "${PRODUCTION_ENV_URL_CREDENTIALS}" ]]; then
                    curl -fsSL --user "${PRODUCTION_ENV_URL_CREDENTIALS}" "${PRODUCTION_ENV_URL}"
                  else
                    curl -fsSL "${PRODUCTION_ENV_URL}"
                  fi
                displayName: 'Test: is application up and running'



