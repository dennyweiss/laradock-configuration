#!/usr/bin/env bash
set -e
set -o pipefail

readonly SCRIPT_PATH="$(dirname "${0}")"
readonly SCRIPT_NAME="$(basename "${0}")"
readonly ENVIRONMENT_FILEPATH="$(pwd)/.env"

readonly REMOTE_ENVIRONMENT="${1}"
readonly ARGS="${@}"

SKIP_DB_DUMP="false"

__USAGE_MESSAGE=$(
  cat <<-HEREDOC
  USAGE: ${SCRIPT_NAME} [ENVIRONMENT] {--db} {--assets} {--files} {--skip-db-dump} {--debug} {--dry-run}

  ENVIRONMENT                 staging|production

  Options:
      --db|--assets|--files   mark explicitly which data to fetch
                              when ommited *all* is applied
      --help                  show usage
      --skip-db-dump          don\'t dump db previously before db fetch
      --debug                 show verbose messages
      --dry-run               don\'t execute fetch
HEREDOC
)

source "${SCRIPT_PATH}/library/default-options.sh"
source "${SCRIPT_PATH}/library/print.sh"
source "${SCRIPT_PATH}/library/logging.sh"
source "${SCRIPT_PATH}/library/helper.sh"
source "${SCRIPT_PATH}/library/remote-command-composer.sh"

print::title 'Fetch db dumps, compiled assets & files'
helper::add_help_option
l::log_default_options

# shellcheck disable=SC2199
if [[ "${@}" == *'--skip-db-dump'* ]]; then
  SKIP_DB_DUMP="true"
fi

if ! source "${ENVIRONMENT_FILEPATH}"; then
  l::log_and_show_usage_and_exit 1 'ERROR' "${ENVIRONMENT_FILEPATH} file missing"
fi

SSH_BASE_PATH=''
REMOTE_DB_PATH=''
REMOTE_ASSETS_PATH=''
REMOTE_FILES_PATH=''
REMOTE_URL=''
REMOTE_PROJECT_PATH=''

helper::initialize_remote_settings "${REMOTE_ENVIRONMENT}"
readonly REMOTE_BASE_COMMAND="ssh ${REMOTE_URL}"

db_dump_command="ssh "${REMOTE_URL}" 'cd ${REMOTE_PROJECT_PATH};bin/db-dump-for-remote.sh --no-backup --hide-title --hide-backup-output %s;'"
db_command="rsync -vuzrS \"${SSH_BASE_PATH}/${REMOTE_DB_PATH}\" \"${DB_DEVELOPMENT}\" --checksum --include '*.sql' --include 'backup/' --exclude '*' --exclude '.DS_Store'"
assets_command="rsync -vuzrS \"${SSH_BASE_PATH}/${REMOTE_ASSETS_PATH}\" \"${ASSETS_DEVELOPMENT}\" --checksum --exclude '.DS_Store'"
files_command="rsync -vuzrS \"${SSH_BASE_PATH}/${REMOTE_FILES_PATH}\" \"${FILES_DEVELOPMENT}\" --checksum --exclude 'cache' --exclude '.DS_Store'"

if [[ "${DRY_RUN}" == 'true' ]]; then
  db_command="${db_command} --dry-run"
  assets_command="${assets_command} --dry-run"
  files_command="${files_command} --dry-run"
fi

all_data_selected="true"
# shellcheck disable=SC2199
if [[ "${@}" == *'--db'* ]] || [[ "${@}" == *'--assets'* ]] || [[ "${@}" == *'--files'* ]]; then
  all_data_selected="false"
fi

# shellcheck disable=SC2199
if [[ "${all_data_selected}" == "true" ]] || [[ "${@}" == *'--db'* ]]; then

  if [[ "${SKIP_DB_DUMP}" == 'false' ]]; then

    if [[ "${DEBUG}" == 'true' ]]; then
      helper::string_replace "db_dump_command" "${db_dump_command}" "--debug"
    else
      helper::string_replace "db_dump_command" "${db_dump_command}"
    fi

    print::task 'Dump DB'
    if [[ "${DEBUG}" == "true" ]]; then
      print::command "${db_dump_command}"
    fi

    if [[ "${DRY_RUN}" == 'false' ]]; then
      eval "${db_dump_command}"
    fi
    echo ''
  fi

  print::task 'Fetch DB dumps'
  if [[ "${DEBUG}" == "true" ]]; then
    print::command "${db_command}"
  fi
  eval "${db_command}"
  echo ''
fi

# shellcheck disable=SC2199
if [[ "${all_data_selected}" == "true" ]] || [[ "${@}" == *'--assets'* ]]; then
  print::task 'Fetch compiled assets'
  if [[ "${DEBUG}" == "true" ]]; then
    print::command "${assets_command}"
  fi
  eval "${assets_command}"
  echo ''
fi

# shellcheck disable=SC2199
if [[ "${all_data_selected}" == "true" ]] || [[ "${@}" == *'--files'* ]]; then
  print::task 'Fetch Files'
  if [[ "${DEBUG}" == "true" ]]; then
    print::command "${files_command}"
  fi
  eval "${files_command}"
  echo ''
fi
