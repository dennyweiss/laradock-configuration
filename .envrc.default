# // Create python venv when python is present on system
if which python &>/dev/null || which python3 &>/dev/null; then 
  layout python-venv python3.7
fi 

# //////////////////////////////////////////////////////////////////////////////
# Define globals
c_reset=$(echo -en '\033[0m')
c_red=$(echo -en '\033[00;31m')
c_lgreen=$(echo -en '\033[01;33m')

custom_bin_path="$(expand_path './bin')"
PATH_add "${custom_bin_path}"

# //////////////////////////////////////////////////////////////////////////////
# Check project dependencies are met
has_dependency_error='false';
dependencies=( 'docker' 'docker-compose' 'just' 'composer' )

for dependency in "${dependencies[@]}"; do
  if ! which "${dependency}" &>/dev/null; then
    echo -en "${c_red}"
    echo -e ">> ERROR: '${dependency}' is missing or not in \$PATH"
    echo -en "${c_reset}"
    has_dependency_error='true'
  fi
done

# [[ "${has_dependency_error}" == 'true' ]] && echo ''; # inject empty line if there is an dependency error

# //////////////////////////////////////////////////////////////////////////////
# Load global environment variables

    # --> currently nothing to modify

# //////////////////////////////////////////////////////////////////////////////
# Load environment variables
docker_env_error=0
supported_docker_env_files=( './.env.dc' './.env.dc.dev' './.env.dc.stage' './.env.dc.prod' )
loaded_env_files=()

for env_file in "${supported_docker_env_files[@]}"; do
    expanded_env_file="$(expand_path "${env_file}")"
    if [[ -f "${expanded_env_file}" ]]; then
      dotenv "${expanded_env_file}"
      loaded_env_files+=( "${env_file}" )
    fi
done

if [[ ${#loaded_env_files[@]} == 0 ]]; then
    echo -en "${c_red}"
    echo -e  ">> ERROR: Could not load any of following environment files:${c_reset}"
    echo -e  "          [${supported_docker_env_files[*]}]\n"
else
    echo -en "${c_lgreen}"
    echo -e  ">> INFO:${c_reset}  environment file(s) loaded in the following order:"
    echo -e  "          [${loaded_env_files[*]}]"
fi

# //////////////////////////////////////////////////////////////////////////////
# Load optional environment files: .env, .env.user
optional_env_files=( './.env' './.env.user' )
optional_loaded_env_files=()

for optional_env_file in "${optional_env_files[@]}"; do
    expanded_optional_env_file="$(expand_path "${optional_env_file}")"
    if [[ -f "${expanded_optional_env_file}" ]]; then
      dotenv "${expanded_optional_env_file}"
      optional_loaded_env_files+=( "${expanded_optional_env_file}" )
    fi
done

if [[ ${#optional_loaded_env_files[@]} > 0 ]]; then
    echo -en "${c_lgreen}"
    echo -e  ">> INFO:${c_reset} optional environment file(s) loaded in the following order:"
    echo -e  "          [${optional_loaded_env_files[*]}]"
fi

# //////////////////////////////////////////////////////////////////////////////
# // Evaluate docker compose project name
# //  order (last wins):
# //    - project directory name
# //    - DC_PROJECT_NAME environment variable
project_directory_name="$(basename "$(pwd)")"
if [[ -n "${DC_PROJECT_NAME}" ]]; then
  echo -en "${c_lgreen}"
  echo -e  ">> INFO:${c_reset} docker-compose project name: '${DC_PROJECT_NAME}', evaluated from '\$DC_PROJECT_NAME'"
  export COMPOSE_PROJECT_NAME="${DC_PROJECT_NAME}"
else 
  echo -en "${c_lgreen}"
  echo -e  ">> INFO:${c_reset} docker-compose project name: '${project_directory_name}', evaluated from 'project dir name'"
  export COMPOSE_PROJECT_NAME="${project_directory_name}"
fi

# //////////////////////////////////////////////////////////////////////////////
# // Define unique docker compose datalocation
docker_compose_data_location="~/.laradock/data/${COMPOSE_PROJECT_NAME}"
echo -en "${c_lgreen}"
echo -e  ">> INFO:${c_reset} docker-compose resolved from 'COMPOSE_PROJECT_NAME' '${COMPOSE_PROJECT_NAME}':"
echo -e  "          [${docker_compose_data_location}]"
export DATA_PATH_HOST="${docker_compose_data_location}"
